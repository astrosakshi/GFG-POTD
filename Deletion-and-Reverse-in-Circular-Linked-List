----Deletion and Reverse in Circular Linked List----------04/10/24

class Solution {
  public:
    // Function to reverse a circular linked list
    Node* reverse(Node* head) {
        if (!head || head->next == head) return head;
        Node *prev = nullptr, *curr = head, *next;
        do {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        } while (curr != head);
        head->next = prev;
        return prev;
    }

    // Function to delete a node from the circular linked list
    Node* deleteNode(Node* head, int key) {
        if (!head) return nullptr;
        if (head->data == key) {
            if (head->next == head) return delete head, nullptr;
            Node* last = head;
            while (last->next != head) last = last->next;
            last->next = head->next;
            Node* newHead = head->next;
            delete head;
            return newHead;
        }
        Node *curr = head, *prev = nullptr;
        do {
            prev = curr, curr = curr->next;
            if (curr->data == key) return prev->next = curr->next, delete curr, head;
        } while (curr != head);
        return head;
    }
};

