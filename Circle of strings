--Circle of strings || POTD 10/9/24--

class Solution {
  public:
    bool dfs(int node, vector<int> &visited, vector<vector<int>> &graph) {
    visited[node] = 1;
    for (int adj : graph[node]) {
        if (!visited[adj]) {
            dfs(adj, visited, graph);
        }
    }
    return true;
}

bool isConnected(vector<vector<int>> &graph, int start) {
    vector<int> visited(26, 0);
    dfs(start, visited, graph);
    for (int i = 0; i < 26; i++) {
        if (graph[i].size() > 0 && !visited[i]) {
            return false;
        }
    }
    return true;
}

int isCircle(vector<string> &arr) {
    vector<int> inDegree(26, 0), outDegree(26, 0);
    vector<vector<int>> graph(26);

    for (string &s : arr) {
        int first = s.front() - 'a';
        int last = s.back() - 'a';
        outDegree[first]++;
        inDegree[last]++;
        graph[first].push_back(last);
    }

    for (int i = 0; i < 26; i++) {
        if (inDegree[i] != outDegree[i]) {
            return 0;
        }
    }

    int start = arr[0].front() - 'a';
    return isConnected(graph, start) ? 1 : 0;
}

int main() {
    vector<string> arr = {"abc", "cde", "efg", "ghi", "iab"};
    cout << isCircle(arr) << endl;
    return 0;
}
};
